/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chemCam_testMain;
import chemcam.*;
import chemCam_testMain.ControllerPanel;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.swing.JOptionPane;

import org.json.simple.JSONObject;
/**
 *
 * @author truol014
 */
public class ControllerPanel extends javax.swing.JPanel{
    private ControllerRunnable controller = null;
    public RoverThread controllerSendThread = null;
    public RoverThread controllerTerminateThread = null;
    public ControllerPanel(){
        initComponents();
        jTextArea2.setText("Command Sequence:\n");        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jSplitPane1.setDividerSize(2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select A Command", "CCAM_POWER_ON", "CCAM_COOLER_ON", "CCAM_LASER_ON", "CCAM_CWL_WARM", "CCAM_SET_FOCUS", "CCAM_LIBS_WARM", "CCAM_FIRE_LASER", "CCAM_LASER_OFF", "CCAM_COOLER_OFF", "CCAM_POWER_OFF" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Send");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Terminate Agent");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("High Priority");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jCheckBox1))
                .addGap(2, 2, 2))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jButton3)
                .addContainerGap())
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(51, 153, 0));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextArea2.setText("Command Sequence:\n");
    }//GEN-LAST:event_jButton1ActionPerformed
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String command = jComboBox1.getSelectedItem().toString();
        if(!command.equals("Select A Command") && !jTextArea2.getText().contains(command)){
            switch(command){
                case "CCAM_POWER_OFF":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_COOLER_ON") && !jTextArea2.getText().contains("CCAM_COOLER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Cooler needs to be turned OFF before turning OFF Power!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_LASER_ON") && !jTextArea2.getText().contains("CCAM_LASER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser needs to be turned OFF before turning OFF Power", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_COOLER_ON":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_COOLER_OFF":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_COOLER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Cooler is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LASER_ON":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LASER_OFF":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_LASER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_CWL_WARM":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LIBS_WARM":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_SET_FOCUS":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_CWL_WARM")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Continuous-Wave Laser is not Warmed Up!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_FIRE_LASER":
                    if(!jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_COOLER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Cooler is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_COOLER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Cooler is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_LASER_ON")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(jTextArea2.getText().contains("CCAM_LASER_OFF")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_SET_FOCUS")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Focus is not Set!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!jTextArea2.getText().contains("CCAM_LIBS_WARM")){
                        JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser-Induced Breakdown Spectroscopy is not Warmed Up!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        jTextArea2.append(command + "\n");
                    }
                    break;                    
                default:
                    jTextArea2.append(command + "\n");
                    break;
            }
        }
        else{
            // To do
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] commandList = jTextArea2.getText().split("\n");
        final JSONObject commandsJSON = new JSONObject();
        boolean send = true;
        for(int i = 0; i < commandList.length; i++){
            if(send){
                switch(commandList[i]){
                    case "Command Sequence:":
                        break;
                    case "CCAM_POWER_ON":
                        if(!jTextArea2.getText().contains("CCAM_POWER_OFF")){
                            JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Power is not going to be turned OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                            send = false;
                            break;
                        }
                        else{
                            commandsJSON.put("Command " + i , commandList[i]);
                            break;
                        }
                    case "CCAM_COOLER_ON":
                        if(!jTextArea2.getText().contains("CCAM_COOLER_OFF")){
                            JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Cooler is not going to be turned OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                            send = false;
                            break;
                        }
                        else{
                            commandsJSON.put("Command " + i , commandList[i]);
                            break;
                        }
                    case "CCAM_LASER_ON":
                        if(!jTextArea2.getText().contains("CCAM_LASER_OFF")){
                            JOptionPane.showMessageDialog(ControllerPanel.jOptionPane1, "Chemical Camera's Laser is not going to be turned OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                            send = false;
                            break;
                        }
                        else{
                            commandsJSON.put("Command " + i , commandList[i]);
                            break;
                        }
                    default:
                        commandsJSON.put("Command " + i , commandList[i]);
                        break;
                }
            }
            else{
                break;
            }
        }
        if(send){
            try{
                controller = new ControllerRunnable(9011, null){
                    @Override
                    public void run(){
                        try{
                            ObjectOutputStream oos = new ObjectOutputStream(getControllerSocket().getSocket().getOutputStream());
                            ObjectInputStream ois = new ObjectInputStream(getControllerSocket().getSocket().getInputStream());
                            controllerSendThread.sleep(2000);
                            jTextArea1.append("Controller: Sending command to Agent\n");
                            oos.writeObject(commandsJSON);
                            controllerSendThread.sleep(1000);
                            ois.close();
                            oos.close(); 
                            closeAll();
                        }
                        catch(InterruptedException | IOException exception){
                            jTextArea1.append("Exception: " + exception + "\n");
                        }
                    }
                };
            }
            catch(IOException socketException){
                jTextArea2.append("IOException on creating new socket: " + socketException + "\n");
            }
            controllerSendThread = new RoverThread(controller, "Controller Thread");
            controllerSendThread.start();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final JSONObject commandsJSON = new JSONObject();
        commandsJSON.put("Terminate", "Shutdown");
        try{
            controller = new ControllerRunnable(9011, null){
                @Override
                public void run(){
                    try{
                        ObjectOutputStream oos = new ObjectOutputStream(getControllerSocket().getSocket().getOutputStream());
                        ObjectInputStream ois = new ObjectInputStream(getControllerSocket().getSocket().getInputStream());
                        jTextArea1.append("Controller: Sending command to Agent\n");
                        oos.writeObject(commandsJSON);
                        ois.close();
                        oos.close(); 
                        closeAll();
                    }
                    catch(IOException exception){
                        jTextArea1.append("Exception: " + exception + "\n");
                    }
                }
            };
        }
        catch(IOException socketException){
            jTextArea2.append("IOException on creating new socket: " + socketException + "\n");
        }
        controllerTerminateThread = new RoverThread(controller, "Controller Thread");
        controllerTerminateThread.start();
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private static javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
