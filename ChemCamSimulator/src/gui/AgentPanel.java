/*
 * @author truol014
 */
package gui;
import chemcam.*;
import java.io.*;
import org.json.simple.JSONObject;

public class AgentPanel extends javax.swing.JPanel{
    public RoverThread agentListenThread;
    
    public AgentPanel(){ 
        AgentRunnable agent = null;
        initComponents();   
        try{
            agent = new AgentRunnable(9011){
                @Override
                public void run(){
                    try{
                        while(true){
                            jTextArea1.append("Agent1: Waiting for command.\n");
                            getRunnableServerSocket().openSocket();
                            ObjectInputStream ois = new ObjectInputStream(getRunnableServerSocket().getSocket().getInputStream());
                            ObjectOutputStream oos = new ObjectOutputStream(getRunnableServerSocket().getSocket().getOutputStream());                          
                            JSONObject commandsList = (JSONObject)ois.readObject();
                            if(commandsList.containsKey("Terminate")){
                                jTextArea1.append("Agent1: Shutdown Command Received from Controller.\n");
                                jTextArea1.append("Agent1: Shutting Down.\n");
                                break;
                            }
                            else{
                                jTextArea1.append("Agent1: Commands Received from Controller.\n");
                                jTextArea1.append("Agent1: Work is Being Processed.\n");
                                executeCommands(commandsList);
                            }
                            ois.close();
                            oos.close();                            
                        }
                        closeAllRunnable();
                    } 
                    catch(IOException | ClassNotFoundException exception) {
                        jTextArea1.append("Exception: " + exception + "\n");
                    } 
                }
            };
        }
        catch(IOException socketException){
            jTextArea1.append("IOException on creating new socket: " + socketException + "\n");
        }
        agentListenThread = new RoverThread(agent, "Agent Server Thread");
    }
    private void executeCommands(JSONObject commandsList){        
        JSONObject report = new JSONObject();
    } 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(51, 153, 0));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
