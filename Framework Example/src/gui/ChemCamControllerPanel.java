/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author truol014
 */
public class ChemCamControllerPanel extends javax.swing.JPanel implements Runnable{
    private final int port = 9011;
    public Socket ControllerSocket;
    public ChemCamControllerPanel(){
        initComponents();
        this.jTextArea2.setText("Command Sequence:\n");
    }
    @Override
    public void run(){
        try{            
            Thread.sleep(2000);
            for(int i = 0; i < 5; i++){
                // Establish controller socket connection to agent 
                ControllerSocket = new Socket(InetAddress.getLocalHost(), port);
                // Write to socket using ObjectOutputStream
                try(ObjectOutputStream oos = new ObjectOutputStream(ControllerSocket.getOutputStream())){
                    jTextArea1.append("Controller: Sending command to Agent\n");
                    if(i == 4){
                        oos.writeObject("exit");
                    }
                    else{
                        oos.writeObject("Test " + i);
                    }
                    // Read the agent response message
                    try(ObjectInputStream ois = new ObjectInputStream(ControllerSocket.getInputStream())){
                        String message = (String) ois.readObject();
                        jTextArea1.append("Controller: Message from Agent - " + message.toUpperCase() + "\n");    
                        ois.close();
                    }
                    catch(ClassNotFoundException inputException){
                        jTextArea1.append("ClassNotFoundException on ObjectInputStream readObject" + inputException + "\n");
                    }
                    oos.close();
                    // Close socket
                    ControllerSocket.close();
                    // Sleeping in a loop! -_-
                    Thread.sleep(1000);
                }
            }    
        }
        catch(UnknownHostException socketException){
            jTextArea1.append("UnknownHostException on Socket connect: " + socketException + "\n");
        }
        catch(InterruptedException threadException){
            jTextArea1.append("InterruptedException on Thread sleep: " + threadException + "\n");
        }
        catch(IOException outputException){
            jTextArea1.append("IOException on ObjectOutputStream writeObject" + outputException + "\n");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jSplitPane1.setDividerSize(2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select A Command", "CCAM_POWER_ON", "CCAM_COOLER_ON", "CCAM_LASER_ON", "CCAM_CWL_WARM", "CCAM_SET_FOCUS", "CCAM_LIBS_WARM", "CCAM_FIRE_LASER", "CCAM_LASER_OFF", "CCAM_COOLER_OFF", "CCAM_POWER_OFF" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Send");

        jCheckBox1.setText("High Priority");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jCheckBox1))
                .addGap(2, 2, 2))
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(51, 153, 0));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jOptionPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jTextArea2.setText("<b>Command Sequence:</b>\n");
    }//GEN-LAST:event_jButton1ActionPerformed
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String command = jComboBox1.getSelectedItem().toString();
        if(!command.equals("Select A Command") && !this.jTextArea2.getText().contains(command)){
            switch(command){
                case "CCAM_POWER_OFF":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_COOLER_ON":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_COOLER_OFF":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_COOLER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Cooler is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LASER_ON":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LASER_OFF":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_LASER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Laser is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_CWL_WARM":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_LIBS_WARM":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_SET_FOCUS":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_CWL_WARM")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Continuous-Wave Laser is not Warmed Up!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;
                case "CCAM_FIRE_LASER":
                    if(!this.jTextArea2.getText().contains("CCAM_POWER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_POWER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Power is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_COOLER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Cooler is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_COOLER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Cooler is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_LASER_ON")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Laser is not ON!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(this.jTextArea2.getText().contains("CCAM_LASER_OFF")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Laser is already OFF!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_SET_FOCUS")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Focus is not Set!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else if(!this.jTextArea2.getText().contains("CCAM_LIBS_WARM")){
                        JOptionPane.showMessageDialog(ChemCamControllerPanel.jOptionPane1, "Chemical Camera's Laser-Induced Breakdown Spectroscopy is not Warmed Up!", "Add Command Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    else{
                        this.jTextArea2.append(command + "\n");
                    }
                    break;                    
                default:
                    this.jTextArea2.append(command + "\n");
                    break;
            }
        }
        else{
            // To do
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private static javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
