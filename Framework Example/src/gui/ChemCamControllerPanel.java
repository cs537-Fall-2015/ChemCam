/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import generic.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JTextArea;

/**
 *
 * @author truol014
 */
public class ChemCamControllerPanel extends javax.swing.JPanel implements Runnable{
    private RoverServerSocket roverServerSocket;
    private final int port = 9898;
    public ChemCamControllerPanel() throws IOException{
        initComponents();
        setRoverServerSocket(port);
    }
    private void setRoverServerSocket(int port) throws IOException {
        this.roverServerSocket = new RoverServerSocket(port);
    }
    public RoverServerSocket getRoverServerSocket() {
        return roverServerSocket;
    }
    public void closeAll() throws IOException{
        if(roverServerSocket != null)
            roverServerSocket.closeAll();
    }
    /**
     * Creates new form ChemCamControllerPanel
     */
    
    @Override
    public void run() {
        // TODO Auto-generated method stub
        JTextArea TextArea = this.jTextArea1;
        try {
            while(true){
                TextArea.append("Server: Waiting for client request\n");	            
                //creating socket and waiting for client connection
                getRoverServerSocket().openSocket();
                //read from socket to ObjectInputStream object
                ObjectInputStream ois = new ObjectInputStream(getRoverServerSocket().getSocket().getInputStream());
                //convert ObjectInputStream object to String
                String message = (String) ois.readObject();
                TextArea.append("Server: Message Received from Client - " + message.toUpperCase() + "\n");
                //create ObjectOutputStream object
                ObjectOutputStream oos = new ObjectOutputStream(getRoverServerSocket().getSocket().getOutputStream());
                //write object to Socket
                oos.writeObject("Server says Hi Client - " + message);
                //close resources
                ois.close();
                oos.close();
                //getRoverServerSocket().closeSocket();
                //terminate the server if client sends exit request
                if(message.equalsIgnoreCase("exit")) break;
            }
            TextArea.append("Server: Shutting down Socket server!!\n");
            //close the ServerSocket object
            closeAll();
            }
            catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
	    catch (ClassNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
	    }
        catch(Exception error){
            TextArea.append("Server: Error:" + error.getMessage() + "\n");
        }		
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
