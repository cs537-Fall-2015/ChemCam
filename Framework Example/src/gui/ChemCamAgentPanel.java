/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import generic.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JTextArea;
//comment

/**
 *
 * @author truol014
 */
public class ChemCamAgentPanel extends javax.swing.JPanel implements Runnable{
    private RoverSocket roverSocket;
    private final int port = 9897;
    public ChemCamAgentPanel() throws UnknownHostException{
        initComponents();
	setRoverSocket(port, null);
    }
    private void setRoverSocket(int port, InetAddress host) throws UnknownHostException{		
	this.roverSocket = new RoverSocket(port, host);
    }
    public RoverSocket getRoverSocket(){		
	return roverSocket;
    }
    public void closeChemCamAgentSocket() throws IOException{
	if(roverSocket != null)
            roverSocket.closeAll();
    }
    /**
     * Creates new form ChemCamAgentPanel
     */
    
    @Override
    public void run(){
    // TODO Auto-generated method stub
        JTextArea TextArea = this.jTextArea1;
        try{
            ObjectInputStream ois = null;
            ObjectOutputStream oos = null;
            Thread.sleep(2000);
            for(int i=0; i<5;i++){
                //establish socket connection to server
                //socket = new Socket(host.getHostName(), 9876);
                //write to socket using ObjectOutputStream
                oos = new ObjectOutputStream(getRoverSocket().getNewSocket().getOutputStream());
                TextArea.append("Client: Sending request to Socket Server\n");
                if(i==4)oos.writeObject("exit");
                else oos.writeObject("Test "+i);
                //read the server response message
                ois = new ObjectInputStream(getRoverSocket().getSocket().getInputStream());
                String message = (String) ois.readObject();
                TextArea.append("Client: Message from Server - " + message.toUpperCase() + "\n");
                //close resources
                ois.close();
                oos.close();
                Thread.sleep(1000);
            }
            closeChemCamAgentSocket();
        }
        catch (UnknownHostException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        catch (Exception error) {
            TextArea.append("Client: Error:" + error.getMessage() + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
